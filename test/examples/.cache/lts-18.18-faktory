<!doctype html><!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]--><!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]--><!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]--><!--[if gt IE 8]><!--><html class="no-js" lang="en"> <!--<![endif]--><head><meta charset="UTF-8"><link href="//fonts.googleapis.com/css?family=Lato:400,700" rel="stylesheet" type="text/css"><link rel="search" type="application/opensearchdescription+xml" title="Stackage.org hoogle" href="/static/opensearchhoogle.xml"><link rel="search" type="application/opensearchdescription+xml" title="Stackage.org package page" href="/static/opensearchpackage.xml"><title>faktory :: Stackage Server</title><meta name="og:site_name" content="Stackage"><meta name="twitter:card" content="summary"><meta name="og:title" content="faktory"><meta name="viewport" content="width=device-width,initial-scale=1"><link href="https://www.stackage.org/feed" type="application/atom+xml" rel="alternate" title="Recent Stackage snapshots">
<link rel="stylesheet" href="https://www.stackage.org/static/combined/d9jEluDQ.css"><link rel="stylesheet" href="https://www.stackage.org/static/combined/kYdVr3eT.css"><style>form.hoogle{margin-bottom:20px}form.hoogle .search{width:25em}form.hoogle input{margin-bottom:0}.exact-lookup{display:inline-block;margin-left:1em}.wrap{padding-left:0 !important;padding-right:0 !important;margin-right:0 !important;margin-left:0 !important}h3{color:#777}.table.snapshots{width:auto;margin-left:auto}.version{font-weight:bold}#disqus_thread{margin-top:2em}#upvote{margin-left:-1em}.fa-google-plus-square{color:#dd4b39
}.fa-facebook-square{color:#3b5998
}.fa-twittersquare{color:#0088cc
}.social{border-top:1px solid #ddd;padding-top:0.5em;margin-bottom:0.5em;margin-top:0.5em;border-bottom:1px solid #ddd;padding-bottom:0.5em}.social .fa-thumbs-o-up{color:rgba(0, 39, 59, 0.34902);cursor:pointer}.social .fa-thumbs-o-up:hover{color:#3f4549
  }.social .fa-thumbs-up{cursor:pointer}.dependencies{margin-top:0.5em;padding-top:0.5em}.docs{margin-top:0.5em;border-top:1px solid #ddd;padding-top:0.5em}.docs ul{list-style-type:none}.docs ul li{line-height:1.5em }.docs,.docs ul,.docs li{position:relative}.docs ul{list-style:none;padding-left:10px}.docs li::before,.docs li::after{content:"";position:absolute;left:-12px}.docs li::before{border-top:1px solid #DDD;top:9px;width:8px;height:0}.docs li::after{border-left:1px solid #DDD;height:100%;width:0px;top:0}.docs ul > li:last-child::after{height:9px}.docs > ul > li::after{border-left:none}.docs > ul > li::before{border-top:none}.downloads{margin-left:1em}.fa-plus-square{color:rgba(0, 39, 59, 0.34902);cursor:pointer}.fa-plus-square:hover{color:#3f4549
}@media (max-width: 767px) {.table.snapshots{margin-top:1em;margin-left:-8px}.container{padding-left:15px !important;padding-right:15px !important;margin-right:0 !important;margin-left:0 !important}}.markdown-container{margin-top:1em;border-top:1px solid #ddd;padding-top:1em;margin-bottom:0em;border-bottom:1px solid #ddd;padding-bottom:1em;background:#f4f4f4}.markdown-container h1,.markdown-container h2,.markdown-container h3,.markdown-container h4,.markdown-container h5{color:#333;margin-top:0.5em;margin-bottom:0.5em;font-weight:normal}.markdown-container h2,.markdown-container h3,.markdown-container h4,.markdown-container h5{margin-top:1em}.markdown-container h1{font-size:3em}.markdown-container h2{font-size:2em}.markdown-container h3{font-size:1.5em}.markdown-container h4,.markdown-container h5{font-size:1.2em}.markdown-container ul,.markdown-container ol,.markdown-container p{margin-top:0.5em}.markdown-container ul,.markdown-container ol{padding-left:1em}.markdown-container pre,.markdown-container pre code,.markdown-container code{font-family:ubuntu mono, dejavu sans mono, monospace;background:#f8f8f8}.markdown-container pre{padding:1em}.changelog-container{margin-top:0.5em}.changelog-container h1{font-size:1.2em}.changelog-container h2,.changelog-container h3,.changelog-container h4,.changelog-container h5{font-size:1.2em}h2.changes-title{margin-top:1em;font-size:1.5em;color:#555}.readme-container{margin-top:1em}.hidden{display:none}.expanding{position:relative}.expanding .bottom-gradient{display:none;bottom:0;position:absolute;width:100%;cursor:pointer;height:150px;line-height:150px;text-align:center;background:-moz-linear-gradient(top, rgba(244,244,244,0) 0%, rgba(244,244,244,1) 100%);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(244,244,244,0)), color-stop(100%,rgba(244,244,244,1)));background:-webkit-linear-gradient(top, rgba(244,244,244,0) 0%,rgba(244,244,244,1) 100%);background:-o-linear-gradient(top, rgba(244,244,244,0) 0%,rgba(244,244,244,1) 100%);background:-ms-linear-gradient(top, rgba(244,244,244,0) 0%,rgba(244,244,244,1) 100%);background:linear-gradient(to bottom, rgba(244,244,244,0) 0%,rgba(244,244,244,1) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#00f4f4f4', endColorstr='#f4f4f4',GradientType=0 )}.expanding .bottom-gradient:hover .fa{color:#000}.expanding .fa{font-size:5em;color:#666;line-height:150px;margin-top:25px}.expanding.collapsed{height:300px;overflow:hidden}.expanding.collapsed .bottom-gradient{display:block}.likes{margin-right:1em}.no-tags{color:#888}.tag-count{border:0.1em solid #d8d8d8;padding:0 0.25em;border-radius:0.25em;color:#999;font-size:0.8em}.tag-count:hover{border:0.1em solid #333;color:#333;cursor:pointer;text-decoration:none}.tag-count.tagged{background:#06537d;border:none;color:#fff}div.plain-text{white-space:pre-wrap}.deprecated{color:#aaa}.deprecated h1,.deprecated h2,.deprecated h3,.deprecated h4,.deprecated h5,.deprecated a{color:#aaa}.deprecated .package-deprecation-warning{color:red}.deprecated .in-favour-of{color:#333}.deprecated .in-favour-of .in-favour-of-list a{color:#08c}.add-to-nightly{border:1px solid black;padding:0.5em;background:#eef}html{position:relative;min-height:100%}body{background:#f0f0f0;font-family:'Lato', sans-serif;font-size:16px;margin-bottom:4em;padding-bottom:2em}code,pre{color:#555;font-family:"ubuntu mono", monospace}.brand > img{height:20px}.navbar-inverse{margin-bottom:1em}.navbar-inverse .navbar-inner{background:#0981c3}.navbar-inverse .navbar-inner .btn-navbar{background:#0981c3}.navbar-inverse .navbar-inner *{color:#fff !important
}.navbar-inverse .nav .active>a,.navbar-inverse .nav .active>a:hover,.navbar-inverse .nav .active>a:focus{background:#0981c3 !important}.navbar-inner{border-color:#06537d !important}.footer{background:#0981c3;border-top:1px solid #ddd;color:#fff;position:absolute;bottom:0;left:0;width:100%;height:4em;line-height:2em;text-align:center}.footer a{color:#fff;font-weight:bold}.footer .span12{padding:0px 15px 0 0;line-height:4em}.alert{margin-top:1em}h1,h2,h3,h4,h5{color:#06537d
}.content{line-height:30px}</style><!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]--><script>document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/,'js');</script></head><body><div id="main" role="main"><div class="navbar navbar-inverse navbar-static-top"><div class="navbar-inner"><div class="container"><button class="btn btn-navbar" type="button" data-toggle="collapse" data-target=".nav-collapse"><span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button>
<a class="brand" href="/"><img src="/static/img/stackage.png" title="Stackage">
</a>
<div class="nav-collapse collapse"><ul class="nav"><li> <a href="/#about">About</a></li>
<li> <a href="/snapshots">Snapshots</a></li>
<li> <a href="/lts">LTS</a></li>
<li> <a href="/nightly">Nightly</a></li>
<li> <a href="https://github.com/fpco/stackage#frequently-asked-questions">FAQ</a></li>
<li> <a href="/blog">Blog</a></li>
</ul>
</div>
</div>
</div>
</div>
<div class="container"><div class="container content " id="snapshot-home"><div class="row"><div class="span12"><h1>faktory</h1><p class="synopsis">Faktory Worker for Haskell</p><p><a href="https://github.com/frontrowed/faktory_worker_haskell#readme">https://github.com/frontrowed/faktory_worker_haskell#readme</a></p><table><tr><td align="right">Version on this page:</td><td><span class="version">1.0.3.1</span></td></tr><tr><td align="right"><a href="https://www.stackage.org/lts-18.18">LTS Haskell 18.18</a>:</td><td><span class="version"><a href="https://www.stackage.org/lts-18.18/package/faktory">1.0.3.1</a></span></td></tr><tr><td align="right"><a href="https://www.stackage.org/nightly-2021-12-16">Stackage Nightly 2021-12-16</a>:</td><td><span class="version"><a href="https://www.stackage.org/nightly-2021-12-16/package/faktory">1.1.2.0</a></span></td></tr><tr><td align="right">Latest on Hackage:</td><td><a href="https://hackage.haskell.org/package/faktory"><span class="version">1.1.2.1</span></a></td></tr></table><p><a href="https://www.stackage.org/package/faktory/snapshots">See all snapshots <code>faktory</code> appears in</a></p></div></div><div class="row"><div class="span12"><div class="authorship"><span class="license">MIT licensed </span>by <strong class="author">Freckle Engineering</strong></div><div class="maintainer">Maintained by <strong class="author"><a href="mailto:engineering@freckle.com">engineering@freckle.com</a></strong></div><div class="pantry-version">This version can be pinned in stack with:<code>faktory-1.0.3.1@sha256:9c4cebd9e40fa17958e1e13dc8f7e2db8e207943ce400adfc040211be3d98ffc,8916</code></div><div class="docs"><h4>Module documentation for 1.0.3.1</h4><form class="hoogle" action="https://www.stackage.org/lts-18.18/hoogle"><input class="search" type="search" autofocus name="q" value="" placeholder="Hoogle Search Phrase">
<input class="btn" type="submit" value="Search">
<input type="hidden" name="package" value="faktory">
<label class="checkbox exact-lookup" for="exact" title="Only find identifiers matching your search term precisely"><input type="checkbox" name="exact" id="exact">
Exact lookup</label>
</form>
<ul class="docs-list"><li>Faktory<ul class="docs-list"><li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Client.html">Faktory.Client</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Connection.html">Faktory.Connection</a>
</li>
<li>Faktory.Ent<ul class="docs-list"><li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Ent-Batch.html">Faktory.Ent.Batch</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Ent-Tracking.html">Faktory.Ent.Tracking</a>
</li>
</ul>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Job.html">Faktory.Job</a>
<ul class="docs-list"><li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Job-Custom.html">Faktory.Job.Custom</a>
</li>
</ul>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-JobOptions.html">Faktory.JobOptions</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-JobState.html">Faktory.JobState</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Prelude.html">Faktory.Prelude</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Producer.html">Faktory.Producer</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Protocol.html">Faktory.Protocol</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Settings.html">Faktory.Settings</a>
</li>
<li><a href="https://www.stackage.org/haddock/lts-18.18/faktory-1.0.3.1/Faktory-Worker.html">Faktory.Worker</a>
</li>
</ul>
</li>
</ul>
</div></div></div></div><div class="container content" id="snapshot-home"><div class="row"><div class="span12"><div class="dependencies" id="dependencies">Depends on 20 packages<em>(<a href=https://www.stackage.org/lts-18.18/package/faktory-1.0.3.1/deps>full list with versions</a>)</em>:</em><div class="dep-list"><a href="https://www.stackage.org/package/aeson" title="&gt;=1.5.5.1">aeson</a>, <a href="https://www.stackage.org/package/aeson-casing" title="&gt;=0.2.0.0">aeson-casing</a>, <a href="https://www.stackage.org/package/base" title="&gt;=4.13 &amp;&amp; &lt;5">base</a>, <a href="https://www.stackage.org/package/bytestring" title="&gt;=0.10.12.0">bytestring</a>, <a href="https://www.stackage.org/package/connection" title="&gt;=0.3.1">connection</a>, <a href="https://www.stackage.org/package/cryptonite" title="&gt;=0.27">cryptonite</a>, <a href="https://www.stackage.org/package/errors" title="&gt;=2.3.0">errors</a>, <a href="https://www.stackage.org/package/faktory" title="-any">faktory</a>, <a href="https://www.stackage.org/package/megaparsec" title="&gt;=9.0.1">megaparsec</a>, <a href="https://www.stackage.org/package/memory" title="&gt;=0.15.0">memory</a>, <a href="https://www.stackage.org/package/mtl" title="&gt;=2.2.2">mtl</a>, <a href="https://www.stackage.org/package/network" title="&gt;=3.1.1.1">network</a>, <a href="https://www.stackage.org/package/random" title="&gt;=1.1">random</a>, <a href="https://www.stackage.org/package/safe-exceptions" title="&gt;=0.1.7.1">safe-exceptions</a>, <a href="https://www.stackage.org/package/scanner" title="&gt;=0.3.1">scanner</a>, <a href="https://www.stackage.org/package/semigroups" title="&gt;=0.19.1">semigroups</a>, <a href="https://www.stackage.org/package/text" title="&gt;1.2">text</a>, <a href="https://www.stackage.org/package/time" title="&gt;=1.9.3">time</a>, <a href="https://www.stackage.org/package/unix" title="&gt;=2.7.2.2">unix</a>, <a href="https://www.stackage.org/package/unordered-containers" title="&gt;=0.2.13.0">unordered-containers</a></div></div><div class="reverse-dependencies" id="reverse-dependencies">Used by 1 package in <b>lts-18.18</b><em>(<a href=https://www.stackage.org/lts-18.18/package/faktory-1.0.3.1/revdeps>full list with versions</a>)</em>:</em><div class="dep-list"><a href="https://www.stackage.org/package/faktory" title="-any">faktory</a></div></div></div></div></div><div class="markdown-container readme-container"><div class="container content"><div class="row"><div class="span12 expanding"># faktory\_worker\_haskell<br><br>[![CircleCI](https://circleci.com/gh/freckle/faktory_worker_haskell.svg?style=svg)](https://circleci.com/gh/freckle/faktory_worker_haskell)<br><br>Haskell client and worker process for the Faktory background job server.<br><br>Architecture overview from [Ruby client README](https://github.com/contribsys/faktory_worker_ruby#readme):<br><br>```<br>                       +--------------------+<br>                       |                    |<br>                       |     Faktory        |<br>                       |     Server         |<br>        +----------&gt;&gt;&gt;&gt;|                    +&gt;&gt;&gt;&gt;--------+<br>        |              |                    |            |<br>        |              |                    |            |<br>        |              +--------------------+            |<br>+-----------------+                            +-------------------+<br>|                 |                            |                   |<br>|    Client       |                            |     Worker        |<br>|    pushes       |                            |     pulls         |<br>|     jobs        |                            |      jobs         |<br>|                 |                            |                   |<br>|                 |                            |                   |<br>+-----------------+                            +-------------------+<br>```<br><br>- Client - an API any process can use to push jobs to the Faktory server.<br>- Worker - a process that pulls jobs from Faktory and executes them.<br>- Server - the Faktory daemon which stores background jobs in queues to be<br>  processed by Workers.<br><br>This package contains only the client and worker parts. The server part is<br>[here](https://github.com/contribsys/faktory/)<br><br>## Installation<br><br>- Hackage: http://hackage.haskell.org/package/faktory<br>- Stackage: *Coming soon*<br><br>## Faktory Documentation<br><br>See the [wiki](//github.com/contribsys/faktory/wiki) for more<br>details.<br><br>## Usage<br><br>&lt;!--<br>```haskell<br>import Data.Aeson<br>import Prelude<br>import Faktory.Producer<br>import Faktory.Job<br>import Faktory.Worker<br>import GHC.Generics<br>import Text.Markdown.Unlit ()<br><br>{- Don&#39;t actually run anything -}<br>main :: IO ()<br>main = if True then pure () else (workerMain &gt;&gt; producerMain)<br>workerMain :: IO ()<br>producerMain :: IO ()<br>```<br>--&gt;<br><br>### Job<br><br>Any value can be a &quot;Job&quot; that is pushed and pulled to and from Faktory via its<br>`ToJSON` and `FromJSON` instances:<br><br>```haskell<br>newtype MyJob = MyJob<br>  { myJobMessage :: String<br>  }<br>  deriving stock Generic<br>  deriving anyclass (ToJSON, FromJSON)<br>```<br><br>### Worker<br><br>```haskell<br>workerMain = runWorkerEnv $ \job -&gt;<br>  -- Process your Job here<br>  putStrLn $ myJobMessage job<br><br>  -- If any exception is thrown, the job will be marked as Failed in Faktory<br>  -- and retried. Note: you will not otherwise hear about any such exceptions,<br>  -- unless you catch-and-rethrow them yourself.<br>```<br><br>### Producer<br><br>`Producer` wraps `Client` for push-only usage.<br><br>```haskell<br>producerMain = do<br>  producer &lt;- newProducerEnv<br><br>  jobId &lt;- perform mempty producer $ MyJob &quot;Hello world&quot;<br><br>  print jobId<br><br>  closeProducer producer<br>```<br><br>### Configuration<br><br>When using `envSettings`, the following variables will be used:<br><br>- `FAKTORY_PROVIDER`: the name of another environment variable where the<br>  connection string can be found. Defaults to `FAKTORY_URL`.<br>- `FAKTORY_URL` (or whatever you named in `FAKTORY_PROVIDER`): connection string<br>  to the Faktory server. Format is<br>  `tcp(+tls)://(:password@)host:port(/namespace)`. Defaults to<br>  `tcp://localhost:4719`. `namespace` is prependend to queue names on job<br>  submission and worker consumption.<br><br>When using `envWorkerSettings`, the following variables are also used:<br><br>- `FAKTORY_QUEUE`: the name of the queue to consume from. Default is &quot;default&quot;.<br>- `FAKTORY_WORKER_ID`: the Id to use for this Worker. Default is to assign a<br>  random one.<br><br>## Examples<br><br>See the [examples](./examples). To run them:<br><br>1. Run a local Faktory server<br><br>   ```console<br>   docker run --rm \<br>     --publish 7419:7419 \<br>     --publish 7420:7420 \<br>     contribsys/faktory<br>   ```<br><br>1. Run the consumer example<br><br>   ```console<br>   % stack exec faktory-example-consumer<br>   Starting consumer loop<br>   ```<br><br>   (Assumes you&#39;ve built the project.)<br><br>1. Submit a Job through the producer example<br><br>   ```console<br>   % stack exec faktory-example-producer hello world<br>   Pushed job: &quot;ljcjlbexbgun&quot;<br>   ```<br><br>   *NOTE*: if you submit &quot;BOOM&quot; as a Job, the processing loop will raise an<br>   exception, so you can see how a Failed Job looks in Faktory.<br><br>1. See that your Job was processed back in the consumer<br><br>   ```console<br>   % stack exec faktory-example-consumer<br>   Starting consumer loop<br>   hello world<br>   ```<br><br>## Development &amp; Tests<br><br>```console<br>stack build --dependencies-only --test --no-run-tests<br>stack build --pedantic --test --no-run-tests<br>stack build --pedantic --test<br>```<br><br>- `FactorySpec` requires a local Faktory server is running, and it will flush<br>  all Jobs from this server as part of running the tests.<br>- The tests for `BATCH` require testing against an Enterprise Faktory image<br><br>---<br><br>[CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)<br><div class="bottom-gradient"><i class="fa fa-angle-down"></i></div></div></div></div></div><div class="container content" id="changes"><div class="row"><div class="span12"><h2 class="changes-title">Changes</h2></div></div></div><div class="markdown-container changelog-container content"><div class="container"><div class="row"><div class="span12 expanding"><h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.3.1...main"><em>Unreleased</em></a></h2>
<p>None</p>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.3.0...v1.0.3.1">v1.0.3.1</a></h2>
<ul>
<li>Export lower-level <code>BATCH</code> functions</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.3...v1.0.3.0">v1.0.3.0</a></h2>
<ul>
<li>Support for <code>TRACK</code> (Enterprise only)</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.2...v1.0.2.3">v1.0.2.3</a></h2>
<ul>
<li>Remove dependencies upper bounds</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.1...v1.0.2.2">v1.0.2.2</a></h2>
<ul>
<li>Relax dependencies upper bounds</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.0...v1.0.2.1">v1.0.2.1</a></h2>
<ul>
<li>Fix bug in <code>at</code> parsing of consumed Job payloads</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.6...v1.0.2.0">v1.0.2.0</a></h2>
<ul>
<li>Partial <code>BATCH</code> support (Enterprise only)</li>
<li>Support for <code>custom</code> field in Job payloads</li>
<li>Lower-level <code>buildJob</code> and <code>commandByteString</code> functions</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.5...v1.0.1.6">v1.0.1.6</a></h2>
<ul>
<li>Relax dependencies upper bounds</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.4...v1.0.1.5">v1.0.1.5</a></h2>
<ul>
<li>Maintain version bounds</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.3...v1.0.1.4">v1.0.1.4</a></h2>
<ul>
<li>Various CI and dependency bounds changes</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.2...v1.0.1.3">v1.0.1.3</a></h2>
<ul>
<li>Add support for queue namespacing</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.1...v1.0.1.2">v1.0.1.2</a></h2>
<ul>
<li>Fix internal handling of invalid Server Replies</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.0...v1.0.1.1">v1.0.1.1</a></h2>
<ul>
<li>Include non-OK reply in <code>commandOK</code> error</li>
<li>Build with GHC-8.8</li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.0.0...v1.0.1.0">v1.0.1.0</a></h2>
<ul>
<li>Upgrade to <code>megaparsec-7</code></li>
</ul>
<h2><a href="https://github.com/frontrowed/faktory_worker_haskell/tree/v1.0.0.0">v1.0.0.0</a></h2>
<p>Initial release.</p>
<div class="bottom-gradient"><i class="fa fa-angle-down"></i></div></div></div></div></div></div>
<div class="footer"><div class="container"><div class="row"><div class="span12">A service provided by
<a href="http://www.fpcomplete.com/">FP Complete</a>
</div>
</div>
</div>
</div>
<script src="https://www.stackage.org/static/combined/KkkNZOBL.js"></script><script src="https://www.stackage.org/static/combined/bPfKWATx.js"></script><script>$(function(){
  hljs.initHighlightingOnLoad();

  $('.expanding').each(function(){
    var $this = $(this);
    if ($this.height() > 300) {
      $this.addClass('collapsed');
      $this.find('.bottom-gradient').click(function(){
        $this.removeClass('collapsed');
      });
    }
  });
});
</script></div><!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.  chromium.org/developers/how-tos/chrome-frame-getting-started --><!--[if lt IE 7 ]><script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script><script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script><![endif]--><script async src="https://www.googletagmanager.com/gtag/js?id=UA-36928035-2"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-36928035-2');</script></body></html>